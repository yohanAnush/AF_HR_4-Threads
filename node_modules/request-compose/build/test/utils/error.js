'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('assert');
var request = require('../../').client;
var error = require('../../utils/error');

describe('error', function () {

  it('node http', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _ref2, body;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return request({
              url: 'compose:5000'
            });

          case 3:
            _ref2 = _context.sent;
            body = _ref2.body;
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context['catch'](0);

            t.ok(/^Protocol "compose:" not supported\. Expected "http:"/.test(_context.t0.message), 'should throw error from the underlying node core http module');

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 7]]);
  })));

  it('error module', function () {
    var res = { statusCode: 500, statusMessage: 'Server Error' };
    var body = { error: 'message' };
    var raw = JSON.stringify(body);
    t.deepEqual(error({ res, body, raw }), {
      message: '500 Server Error',
      res: { statusCode: 500, statusMessage: 'Server Error' },
      body: { error: 'message' },
      raw: '{"error":"message"}'
    }, 'request properties should be set');
  });

  it('error module - without raw parameter', function () {
    var res = { statusCode: 500, statusMessage: 'Server Error' };
    var body = 'not ok';
    t.deepEqual(error({ res, body }), {
      message: '500 Server Error',
      res: { statusCode: 500, statusMessage: 'Server Error' },
      body: 'not ok',
      raw: 'not ok'
    }, 'raw should equal body');
  });
});