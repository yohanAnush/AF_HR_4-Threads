'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('assert');
var http = require('http');

var request = require('../').client;

describe('client', function () {
  var server;

  before(function (done) {
    server = http.createServer();
    server.on('request', function (req, res) {
      t.equal(req.method, 'POST');
      t.equal(req.headers['content-type'], 'application/json');
      t.equal(req.headers['content-length'], 16);
      var body = '';
      req.on('data', function (chunk) {
        return body += chunk;
      });
      req.on('end', function () {
        t.deepStrictEqual(JSON.parse(body), { client: 'hey' });
        res.writeHead(200, 'OK', { 'content-type': 'application/json' });
        res.end(JSON.stringify({ server: 'hi' }));
      });
    });
    server.listen(5000, done);
  });

  it('opinions', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _ref2, res, body;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return request({
              method: 'POST',
              url: 'http://localhost:5000',
              json: { client: 'hey' }
            });

          case 2:
            _ref2 = _context.sent;
            res = _ref2.res;
            body = _ref2.body;

            t.equal(res.statusCode, 200);
            t.equal(res.statusMessage, 'OK');
            t.deepStrictEqual(body, { server: 'hi' });

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  after(function (done) {
    return server.close(done);
  });
});