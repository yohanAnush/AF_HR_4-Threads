'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('assert');
var http = require('http');

var compose = require('../');

var request = compose(function (options) {
  options.headers = options.headers || {};
  options.headers['user-agent'] = 'request-compose';
  return options;
}, function (options) {
  return new Promise(function (resolve, reject) {
    http.request(options).on('response', resolve).on('error', reject).end();
  });
}, function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(res) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new Promise(function (resolve, reject) {
              var body = '';
              res.on('data', function (chunk) {
                return body += chunk;
              }).on('end', function () {
                return resolve({ res, body });
              }).on('error', reject);
            });

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}(), function (_ref2) {
  var res = _ref2.res,
      body = _ref2.body;
  return { res, body: JSON.parse(body) };
});

describe('compose', function () {
  var server;

  before(function (done) {
    server = http.createServer();
    server.on('request', function (req, res) {
      t.equal(req.headers['user-agent'], 'request-compose');
      res.writeHead(200, 'OK', {
        'content-type': 'application/json'
      });
      res.end(JSON.stringify({ a: 1 }));
    });
    server.listen(5000, done);
  });

  it('request', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var _ref4, res, body;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return request({
              port: 5000
            });

          case 2:
            _ref4 = _context2.sent;
            res = _ref4.res;
            body = _ref4.body;

            t.equal(res.statusCode, 200);
            t.equal(res.statusMessage, 'OK');
            t.deepStrictEqual(body, { a: 1 });

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  after(function (done) {
    return server.close(done);
  });
});