'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

var t = require('assert');
var fs = require('fs');
var path = require('path');
var http = require('http');
var https = require('https');

var credentials = {
  key: fs.readFileSync(path.resolve(__dirname, '../ssl/private.pem'), 'utf8'),
  cert: fs.readFileSync(path.resolve(__dirname, '../ssl/public.pem'), 'utf8')
};

var Request = {
  send: require('../../request/send')()
};

describe('send', function () {
  var httpServer, httpsServer;

  before(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new Promise(function (resolve) {
              httpServer = http.createServer();
              httpServer.on('request', function (req, res) {
                res.writeHead(200, 'HTTP');
                if (req.method === 'POST') {
                  var body = '';
                  req.on('data', function (chunk) {
                    return body += chunk;
                  });
                  req.on('end', function () {
                    t.equal(body, 'hey');
                    res.end();
                  });
                } else {
                  res.end();
                }
              });
              httpServer.listen(5001, resolve);
            });

          case 2:
            _context.next = 4;
            return new Promise(function (resolve) {
              httpsServer = https.createServer(credentials);
              httpsServer.on('request', function (req, res) {
                if (req.url === '/') {
                  res.writeHead(200, 'HTTPS');
                  res.end();
                } else if (req.url === '/error') {
                  req.destroy();
                }
              });
              httpsServer.listen(5002, resolve);
            });

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it('http', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var _ref3, res;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return Request.send({
              options: {
                protocol: 'http:',
                port: 5001
              }
            });

          case 2:
            _ref3 = _context2.sent;
            res = _ref3.res;

            t.equal(res.statusCode, 200);
            t.equal(res.statusMessage, 'HTTP');

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('https', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var _ref5, res;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Request.send({
              options: {
                protocol: 'https:',
                port: 5002
              }
            });

          case 2:
            _ref5 = _context3.sent;
            res = _ref5.res;

            t.equal(res.statusCode, 200);
            t.equal(res.statusMessage, 'HTTPS');

          case 6:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('send body', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var _ref7, res;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return Request.send({
              options: {
                method: 'POST',
                protocol: 'http:',
                port: 5001
              },
              body: 'hey'
            });

          case 2:
            _ref7 = _context4.sent;
            res = _ref7.res;

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  it('error', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var _ref9, res;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return Request.send({
              options: {
                protocol: 'https:',
                port: 5002,
                path: '/error'
              }
            });

          case 3:
            _ref9 = _context5.sent;
            res = _ref9.res;
            _context5.next = 10;
            break;

          case 7:
            _context5.prev = 7;
            _context5.t0 = _context5['catch'](0);

            t.equal(_context5.t0.message, 'socket hang up', 'should throw error');

          case 10:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined, [[0, 7]]);
  })));

  after(function (done) {
    return httpServer.close(function () {
      return httpsServer.close(done);
    });
  });
});