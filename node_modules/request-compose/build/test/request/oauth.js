'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('assert');
var http = require('http');

var compose = require('../../');
compose.Request.oauth = require('request-oauth');
var request = compose.client;

describe('oauth', function () {
  var server;

  before(function (done) {
    server = http.createServer();
    server.on('request', function (req, res) {
      res.end(req.headers.authorization);
    });
    server.listen(5000, done);
  });

  it('middleware', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _ref2, body, header;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return request({
              url: 'http://localhost:5000',
              oauth: {
                consumer_key: 'app_key',
                consumer_secret: 'app_secret',
                token: 'user_token',
                token_secret: 'user_secret'
              }
            });

          case 2:
            _ref2 = _context.sent;
            body = _ref2.body;
            header = body.replace('OAuth', '').trim().split(',').map(function (kvp) {
              return kvp.split('=');
            }).reduce(function (all, _ref3) {
              var _ref4 = _slicedToArray(_ref3, 2),
                  key = _ref4[0],
                  value = _ref4[1];

              return all[key] = decodeURIComponent(value.replace(/"/g, '')), all;
            }, {});


            t.equal(header.oauth_consumer_key, 'app_key');
            t.equal(header.oauth_token, 'user_token');
            t.equal(header.oauth_version, '1.0');
            t.equal(header.oauth_signature_method, 'HMAC-SHA1');

            t.equal(typeof header.oauth_nonce, 'string');
            t.equal(typeof header.oauth_timestamp, 'string');
            t.equal(typeof header.oauth_signature, 'string');

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  after(function (done) {
    server.close(done);
  });
});