'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

var t = require('assert');
var fs = require('fs');
var path = require('path');
var http = require('http');
var https = require('https');

var credentials = {
  key: fs.readFileSync(path.resolve(__dirname, './ssl/private.pem'), 'utf8'),
  cert: fs.readFileSync(path.resolve(__dirname, './ssl/public.pem'), 'utf8')
};

var request = require('../').client;

describe('protocol', function () {
  var httpServer, httpsServer;

  before(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new Promise(function (resolve) {
              httpServer = http.createServer();
              httpServer.on('request', function (req, res) {
                res.writeHead(200, 'HTTP');
                res.end();
              });
              httpServer.listen(5001, resolve);
            });

          case 2:
            _context.next = 4;
            return new Promise(function (resolve) {
              httpsServer = https.createServer(credentials);
              httpsServer.on('request', function (req, res) {
                res.writeHead(200, 'HTTPS');
                res.end();
              });
              httpsServer.listen(5002, resolve);
            });

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it('http', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var _ref3, res;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return request({
              url: 'http://localhost:5001'
            });

          case 2:
            _ref3 = _context2.sent;
            res = _ref3.res;

            t.equal(res.statusCode, 200);
            t.equal(res.statusMessage, 'HTTP');

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('https', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var _ref5, res;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return request({
              url: 'https://localhost:5002'
            });

          case 2:
            _ref5 = _context3.sent;
            res = _ref5.res;

            t.equal(res.statusCode, 200);
            t.equal(res.statusMessage, 'HTTPS');

          case 6:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  after(function (done) {
    return httpServer.close(function () {
      return httpsServer.close(done);
    });
  });
});