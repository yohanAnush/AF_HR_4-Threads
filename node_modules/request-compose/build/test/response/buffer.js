'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('assert');
var stream = require('stream');

var Response = {
  buffer: require('../../response/buffer')()
};

describe('buffer', function () {

  it('buffer response body', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var res, _ref2, body;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            res = new stream.Readable();

            res._read = function (size) {/*noop*/};

            setTimeout(function () {
              res.emit('data', 'hey');
              res.emit('end');
            }, 0);

            _context.next = 5;
            return Response.buffer({ res });

          case 5:
            _ref2 = _context.sent;
            body = _ref2.body;

            t.equal(body, 'hey', 'should buffer the response body');

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});