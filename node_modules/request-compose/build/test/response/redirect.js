'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('assert');
var http = require('http');

var compose = require('../../');
compose.Request.oauth = require('request-oauth');
var request = compose.client;

describe('redirect', function () {
  var server, server2, counter;

  before(function (done) {
    server = http.createServer();
    server.on('request', function (req, res) {
      var _req$url$split = req.url.split('?'),
          _req$url$split2 = _slicedToArray(_req$url$split, 2),
          _ = _req$url$split2[0],
          query = _req$url$split2[1];

      if (/^\/no-location/.test(req.url)) {
        res.writeHead(301);
        res.end(query || 'not ok');
      } else if (/^\/absolute/.test(req.url)) {
        res.writeHead(301, { location: 'http://localhost:5000/target' });
        res.end(query || 'not ok');
      } else if (/^\/relative/.test(req.url)) {
        res.writeHead(301, { location: '/target' });
        res.end(query || 'not ok');
      } else if (/^\/target/.test(req.url)) {
        res.writeHead(200, query ? { 'content-type': 'application/x-www-form-urlencoded' } : {});
        res.end(query || 'ok');
      } else if (req.url === '/stuck') {
        res.writeHead(301, { location: 'http://localhost:5000/stuck' });
        res.end((++counter).toString());
      } else if (req.url === '/external') {
        res.writeHead(301, { location: 'http://127.0.0.1:5001/external' });
        res.end('ok');
      }
    });

    server2 = http.createServer();
    server2.on('request', function (req, res) {
      if (req.url === '/external') {
        res.writeHead(200);
        res.end(req.headers.authorization);
      }
    });

    server.listen(5000, function () {
      server2.listen(5001, done);
    });
  });

  it('missing location header', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _ref2, res, body;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return request({
              url: 'http://localhost:5000/no-location'
            });

          case 2:
            _ref2 = _context.sent;
            res = _ref2.res;
            body = _ref2.body;

            t.strictEqual(res.statusCode, 301);
            t.equal(res.statusMessage, 'Moved Permanently');
            t.equal(body, 'not ok');

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it('do not follow patch|put|post|delete redirects', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var _ref4, res, body;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return request({
              method: 'POST',
              url: 'http://localhost:5000/absolute'
            });

          case 2:
            _ref4 = _context2.sent;
            res = _ref4.res;
            body = _ref4.body;

            t.strictEqual(res.statusCode, 301);
            t.equal(res.statusMessage, 'Moved Permanently');
            t.equal(body, 'not ok');

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('follow all redirects', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var _ref6, res, body;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return request({
              method: 'POST',
              url: 'http://localhost:5000/absolute',
              redirect: { all: true }
            });

          case 2:
            _ref6 = _context3.sent;
            res = _ref6.res;
            body = _ref6.body;

            t.strictEqual(res.statusCode, 200);
            t.equal(res.statusMessage, 'OK');
            t.equal(body, 'ok');
            t.equal(res.req.method, 'POST');

          case 9:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('absolute URL', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var _ref8, body;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return request({
              url: 'http://localhost:5000/absolute'
            });

          case 2:
            _ref8 = _context4.sent;
            body = _ref8.body;

            t.equal(body, 'ok', 'should follow absolute URLs');

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  it('absolute URL + querystring', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var _ref10, body;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return request({
              url: 'http://localhost:5000/absolute?b=2',
              qs: { a: 1 }
            });

          case 2:
            _ref10 = _context5.sent;
            body = _ref10.body;

            t.deepEqual(body, { a: '1', b: '2' }, 'should persist URL querystring');

          case 5:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  it('relative URL', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
    var _ref12, body;

    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return request({
              url: 'http://localhost:5000/relative'
            });

          case 2:
            _ref12 = _context6.sent;
            body = _ref12.body;

            t.equal(body, 'ok', 'should follow relative URLs');

          case 5:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  })));

  it('relative URL + querystring', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
    var _ref14, body;

    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return request({
              url: 'http://localhost:5000/relative?b=2',
              qs: { a: 1 }
            });

          case 2:
            _ref14 = _context7.sent;
            body = _ref14.body;

            t.deepEqual(body, { a: '1', b: '2' }, 'should persist URL querystring');

          case 5:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  })));

  it('stuck in redirect loop', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
    var args;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            counter = -1;
            args = {
              url: 'http://localhost:5000/stuck'
            };
            _context8.prev = 2;
            _context8.next = 5;
            return request(args);

          case 5:
            _context8.next = 12;
            break;

          case 7:
            _context8.prev = 7;
            _context8.t0 = _context8['catch'](2);

            t.equal(_context8.t0.message, 'request-compose: exceeded maximum redirects', 'throw error on maximum redirects exceeded');
            t.equal(_context8.t0.body, '3', 'by default maximum of 3 redirects are allowed');
            t.deepEqual(args, { url: 'http://localhost:5000/stuck' }, 'input args should not be modified');

          case 12:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined, [[2, 7]]);
  })));

  it('set max redirects to follow', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
    var args;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            counter = -1;
            args = {
              url: 'http://localhost:5000/stuck',
              redirect: { max: 5 }
            };
            _context9.prev = 2;
            _context9.next = 5;
            return request(args);

          case 5:
            _context9.next = 12;
            break;

          case 7:
            _context9.prev = 7;
            _context9.t0 = _context9['catch'](2);

            t.equal(_context9.t0.message, 'request-compose: exceeded maximum redirects', 'throw error on maximum redirects exceeded');
            t.equal(_context9.t0.body, '5', 'by default maximum of 3 redirects are allowed');
            t.deepEqual(args, { url: 'http://localhost:5000/stuck', redirect: { max: 5 } }, 'input args should not be modified');

          case 12:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, undefined, [[2, 7]]);
  })));

  it('keep auth option when changing hostnames', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
    var args, _ref18, body;

    return regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            args = {
              url: 'http://localhost:5000/external',
              auth: { user: 'user', pass: 'pass' }
            };
            _context10.next = 3;
            return request(args);

          case 3:
            _ref18 = _context10.sent;
            body = _ref18.body;

            t.ok(/^Basic/.test(body), 'should have authorization header');
            t.deepEqual(args, { url: 'http://localhost:5000/external', auth: { user: 'user', pass: 'pass' } }, 'input args should not be modified');

          case 7:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, undefined);
  })));

  it('keep oauth option when changing hostnames', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
    var args, _ref20, body;

    return regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            args = {
              url: 'http://localhost:5000/external',
              oauth: {
                consumer_key: 'consumer_key',
                consumer_secret: 'consumer_secret',
                token: 'token',
                token_secret: 'token_secret'
              }
            };
            _context11.next = 3;
            return request(args);

          case 3:
            _ref20 = _context11.sent;
            body = _ref20.body;

            t.ok(/^OAuth/.test(body), 'should have authorization header');
            t.deepEqual(args, {
              url: 'http://localhost:5000/external',
              oauth: {
                consumer_key: 'consumer_key',
                consumer_secret: 'consumer_secret',
                token: 'token',
                token_secret: 'token_secret'
              }
            }, 'input args should not be modified');

          case 7:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, undefined);
  })));

  it('keep authorization header when changing hostnames', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
    var args, _ref22, body;

    return regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            args = {
              url: 'http://localhost:5000/external',
              headers: { authorization: 'Bearer fo' }
            };
            _context12.next = 3;
            return request(args);

          case 3:
            _ref22 = _context12.sent;
            body = _ref22.body;

            t.ok(/^Bearer/.test(body), 'should have authorization header');
            t.deepEqual(args, { url: 'http://localhost:5000/external', headers: { authorization: 'Bearer fo' } }, 'input args should not be modified');

          case 7:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, undefined);
  })));

  it('remove auth options when changing hostnames', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
    var args, _ref24, body;

    return regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            args = {
              url: 'http://localhost:5000/external',
              auth: { user: 'user', pass: 'pass' },
              redirect: { auth: false }
            };
            _context13.next = 3;
            return request(args);

          case 3:
            _ref24 = _context13.sent;
            body = _ref24.body;

            t.equal(body, '', 'authorization header should be removed');
            t.deepEqual(args, {
              url: 'http://localhost:5000/external',
              auth: { user: 'user', pass: 'pass' },
              redirect: { auth: false }
            }, 'input args should not be modified');

          case 7:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, undefined);
  })));

  it('remove oauth option when changing hostnames', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
    var args, _ref26, body;

    return regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            args = {
              url: 'http://localhost:5000/external',
              oauth: {
                consumer_key: 'consumer_key',
                consumer_secret: 'consumer_secret',
                token: 'token',
                token_secret: 'token_secret'
              },
              redirect: { auth: false }
            };
            _context14.next = 3;
            return request(args);

          case 3:
            _ref26 = _context14.sent;
            body = _ref26.body;

            t.equal(body, '', 'authorization header should be removed');
            t.deepEqual(args, {
              url: 'http://localhost:5000/external',
              oauth: {
                consumer_key: 'consumer_key',
                consumer_secret: 'consumer_secret',
                token: 'token',
                token_secret: 'token_secret'
              },
              redirect: { auth: false }
            }, 'input args should not be modified');

          case 7:
          case 'end':
            return _context14.stop();
        }
      }
    }, _callee14, undefined);
  })));

  it('remove authorization header when changing hostnames', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
    var args, _ref28, body;

    return regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            args = {
              url: 'http://localhost:5000/external',
              headers: { authorization: 'Bearer fo' },
              redirect: { auth: false }
            };
            _context15.next = 3;
            return request(args);

          case 3:
            _ref28 = _context15.sent;
            body = _ref28.body;

            t.equal(body, '', 'authorization header should be removed');
            t.deepEqual(args, {
              url: 'http://localhost:5000/external',
              headers: { authorization: 'Bearer fo' },
              redirect: { auth: false }
            }, 'input args should not be modified');

          case 7:
          case 'end':
            return _context15.stop();
        }
      }
    }, _callee15, undefined);
  })));

  it('switch to safe method', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
    var _ref30, res, body;

    return regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return request({
              method: 'POST',
              url: 'http://localhost:5000/absolute',
              redirect: { all: true, method: false }
            });

          case 2:
            _ref30 = _context16.sent;
            res = _ref30.res;
            body = _ref30.body;

            t.strictEqual(res.statusCode, 200);
            t.equal(res.statusMessage, 'OK');
            t.equal(body, 'ok');
            t.equal(res.req.method, 'GET');

          case 9:
          case 'end':
            return _context16.stop();
        }
      }
    }, _callee16, undefined);
  })));

  it('referer', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
    var _ref32, res, body;

    return regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return request({
              url: 'http://localhost:5000/absolute',
              redirect: { referer: true }
            });

          case 2:
            _ref32 = _context17.sent;
            res = _ref32.res;
            body = _ref32.body;

            t.strictEqual(res.statusCode, 200);
            t.equal(res.statusMessage, 'OK');
            t.equal(body, 'ok');
            t.equal(res.req.getHeader('referer'), 'http://localhost:5000/absolute');

          case 9:
          case 'end':
            return _context17.stop();
        }
      }
    }, _callee17, undefined);
  })));

  after(function (done) {
    server.close(function () {
      server2.close(done);
    });
  });
});