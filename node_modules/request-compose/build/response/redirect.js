'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var url = require('url');
var error = require('../utils/error');

module.exports = function (args, client) {
  return function (_ref) {
    var options = _ref.options,
        res = _ref.res,
        body = _ref.body,
        raw = _ref.raw;


    if (!/^3/.test(res.statusCode)) {
      // not a redirect
      return { options, res, body, raw };
    }

    var defaults = {
      max: 3,
      all: false,
      method: true,
      referer: false,
      auth: true,
      followed: 0,
      hostname: options.hostname
    };

    var redirect = Object.assign(defaults, args.redirect);

    var header = Object.keys(res.headers).find(function (name) {
      return name.toLowerCase() === 'location';
    });

    var location = res.headers[header];

    if (!location || !redirect.all && /patch|put|post|delete/i.test(options.method)) {
      // do not follow redirects
      return { options, res, body, raw };
    }

    // relative location
    if (!/^https?:/.test(location)) {
      location = url.resolve(options.protocol + '//' + options.hostname + (options.port && options.port !== 80 ? `:${options.port}` : ''), location);
    }

    // querystring

    var _options$path$split = options.path.split('?'),
        _options$path$split2 = _slicedToArray(_options$path$split, 2),
        _ = _options$path$split2[0],
        query = _options$path$split2[1];

    if (query) {
      location += `?${query}`;
    }

    // args
    var copy = Object.assign({}, args, { url: location, redirect });
    copy.headers = JSON.parse(JSON.stringify(copy.headers || {}));

    // remove authorization
    if (!redirect.auth && redirect.hostname !== url.parse(location).hostname) {
      var header = Object.keys(copy.headers).find(function (name) {
        return name.toLowerCase() === 'authorization';
      });
      if (header) {
        delete copy.headers[header];
      }
      delete copy.auth;
      delete copy.oauth;
    }

    // switch to safe method
    if (!redirect.method && /patch|put|post|delete/i.test(options.method)) {
      copy.method = 'GET';
    }

    // set referer
    if (redirect.referer) {
      copy.headers.referer = url.resolve(options.protocol + '//' + options.hostname + (options.port && options.port !== 80 ? `:${options.port}` : ''), options.path);
    }

    // redirect
    if (redirect.followed < redirect.max) {
      redirect.followed++;
      return client(copy);
    } else {
      var err = error({ res, body, raw });
      err.message = 'request-compose: exceeded maximum redirects';
      throw err;
    }
  };
};