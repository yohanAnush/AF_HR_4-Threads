'use strict';

var compose = function compose() {
  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function (args) {
    return fns.reduce(function (p, f) {
      return p.then(f);
    }, Promise.resolve(args));
  };
};

var load = function load(type, middlewares) {
  return middlewares.reduce(function (all, mw) {
    return all[mw] = require(`./${type}/${mw}`), all;
  }, {});
};

var Request = load('request', ['defaults', 'url', 'qs', 'form', 'json', 'body', 'auth', 'length', 'send']);

var Response = load('response', ['buffer', 'parse', 'status', 'redirect']);

var utils = load('utils', ['error', 'log']);

var client = function client(args) {
  return compose(Request.defaults(args), function () {
    return args.url ? Request.url(args.url) : function (_ref) {
      var options = _ref.options;
      return { options };
    };
  }(), function () {
    return args.qs ? Request.qs(args.qs) : function (_ref2) {
      var options = _ref2.options;
      return { options };
    };
  }(), function () {
    return args.form ? Request.form(args.form) : args.json ? Request.json(args.json) : args.body ? Request.body(args.body) : function (_ref3) {
      var options = _ref3.options;
      return { options };
    };
  }(), function () {
    return args.auth ? Request.auth(args.auth) : args.oauth ? Request.oauth(args.oauth) : function (_ref4) {
      var options = _ref4.options,
          body = _ref4.body;
      return { options, body };
    };
  }(), function () {
    return function (_ref5) {
      var options = _ref5.options,
          body = _ref5.body;
      return body ? Request.length()({ options, body }) : { options };
    };
  }(), Request.send(), Response.buffer(), Response.parse(), Response.status(), Response.redirect(args, client))();
};

compose.client = client;
compose.Request = Request;
compose.Response = Response;
module.exports = compose;